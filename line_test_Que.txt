いろは市には路線Aと路線Bの2つの路線が走っています。都心はA7であり、A1, A13, B1は住宅地のあるターミナル駅です。いろは市では、都心か住宅地のあるターミナル駅のみが、電車の始点か終点になりえます。

住宅地のあるターミナル駅には車庫があり、これらの駅には電車を夜間に何台でも停めておくことができます。しかし、都心には車庫がありません。そのため都心では、都心始発の電車を確保するために、前日のA線上り/下りB線下りのそれぞれの最終電車（合計3台のみ）を、プラットフォームに停めておく運用をしています。
このような運用を実現するために、下記のように電車が運行されています。

ザ・ミッション
任意の2駅を結ぶ最速の乗換経路を示すCLIアプリケーションを作成してください。

共通
以下のルールによって、電車の動きが一意に確定することが保証される
都心(A7)と住宅地のあるターミナル駅(A1, A13, B1)のみが、電車の始点・終点となる
住宅地のあるターミナル駅(A1, A13, B1)からは、23時(23:00を含む)以降出発する電車はない
翌朝の一番電車の始発運転に利用するために、住宅地のあるターミナル駅(A1, A13, B1)から出発したそれぞれの最終電車は、必ずA7行である
路線の向きは以下のように定められる
同じ路線内ならば、駅名の数字部分が大きくなる方が「上り」である
同じ路線内ならば、駅名の数字部分が小さくなる方が「下り」である
全ての路線Bの駅にとって、A7は「上り」方向である
例: A4にいる人にとって、上りの電車とは、A4からA5へと向かう電車のことである
A7駅で、路線Aと路線Bの間を乗り換えるのに、要する時間は1分である
例えば路線AからA7駅に10:45に到着した場合、路線Bの10:46の電車には乗れるが、10:45の電車には乗れない
1分要するのは路線をまたぐ乗り換えの時のみである。
例えば、ある電車 x の到着時刻と同路線上にある別の電車 y の出発時刻が同じ場合は、1分を消費せずに電車 x から y に乗り継ぐことができる
路線A
A1発の電車
5:55発を始発として、5分毎に出発する
1本おきにA7行とA13行となる（最終電車はA7行）
始発はA7行である
A7発の電車
6:06発を始発として、A1行の電車が10分毎に出発する
6:10に、A13行の電車が1本だけ出発ある
一日を通じて、A1発A7行の電車の数だけ、電車が出発する
A13発の電車
5:52発を始発として10分毎に出発する
最終電車以外の電車は、A1行である
最終電車は、A7行である
路線B
B1発の電車
6:00発を始発として、6分毎にA7行の電車が出発する
A7発の電車
6:11発を始発として、6分毎にB1行の電車が出発する
一日を通じて、B1発A7行の電車の数だけ、電車が出発する
実装方法
CLIアプリケーションについて
入力値を引数に取り、結果を標準出力に出力するCLIアプリケーションとして解答を実装してください。 CLIの実装方法については[指定言語].mdを参照ください。

引数
このアプリケーションでは引数として以下の3つが与えられます。

出発駅名
路線名がAならば、A1, A2, ... A13のどれか
路線名がBならば、A7, B1, B2, ..., B5のどれか
到着駅名
路線名がAならば、A1, A2, ... A13のどれか
路線名がBならば、A7, B1, B2, ..., B5のどれか
出発駅から到着駅へ、その日のうちに到達可能であることが保証される
出発駅と到着駅は異なる
出発時刻 HH:MM
0でパディングされた2文字の時間HHと分MMが与えられます
HHは、05, 06, ..., 22, 23のどれか
MMは、00, 01, ..., 58, 59のどれか
出力
以下のルールで、HH:MMに出発駅にいる時、到着駅まで移動するための乗換方法を出力してください。

使う路線それぞれに対して、路線 出発駅 電車の出発時間 - 到着駅 電車の到着時間を、移動順で1行ずつ出力する
到着駅に着く時間が、最も早いものを選ぶ
到着駅に着く時間が同じ経路が複数ある場合は、出発時刻が最も遅くなる経路を選ぶ
入出力例
$ myapp A1 B3 08:26
A A1 08:30 - A7 08:50
B A7 08:53 - B3 09:01
$ myapp B3 A1 05:26
B B3 06:07 - A7 06:15
A A7 06:16 - A1 06:36
$ myapp A3 A11 22:26
A A3 22:28 - A11 22:51

#############3
Ruby.md

CLIアプリケーション作成方法 (Ruby)
main.rbを編集して、CLIアプリを実装してください。
チャレンジ内でファイルの作成が許可されていれば、可読性等のためにファイルを分割する事も可能です。

コマンドライン引数の取得方法
main.rb内で定義されている、mainという関数から、 argv の名前で取得可能です。

def main(argv)
  # code to run
end
ここでの argv は index.rb から渡されるもので、ARGV の内容がそのまま渡されます。

コマンド実行結果の標準出力への出力
stdout への出力は標準の puts メソッド等が使用可能です

puts "Hello World"
外部ライブラリの追加方法
外部ライブラリを使用する場合は以下の手順で実施してください。

Gemfileにライブラリ名を記述
